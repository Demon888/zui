#
# Library file (*.lzui)
#
# System (internal) functions
#

ZUI[syslib_sourced]="1"

# Gets cursor minimum and maximum x position for
# given line and given (via id) text field. Stores
# them into two parameters given by name. Testable,
# returns if the cursor positions could have been
# established.
#
# Example call:
# -zui_syslib_get_tfield_cursor_boundaries "cidx_start" "cidx_end" "${list[10]}" "${reply[@]}"
#
# $1 - output parameter name - cursor start index
# $2 - output parameter name - cursor end index
# $3 - current $list (zui-list working variable) element
# $4, ..., $11 - decoded __text field
function -zui_syslib_get_tfield_cursor_boundaries() {
    local __out1="$1" __out2="$2" __elem="$3" __id="$4"
    local -a __output

    zui-process-buffer "$__elem"

    integer __i __size="${#ZUI_PB_WORDS[@]}" __idx=0
    local __seg __text

    for (( __i=1; __i <= __size; __i ++ )); do
        __idx+="${#ZUI_PB_SPACES[__i]}"
        __seg="${ZUI_PB_WORDS[__i]}"
        if -zui_stdlib_is_hyperlink "$__seg"; then
            __text="${__seg//$'\01'[^$'\01']#$'\01'[^$'\01']#$'\01'[^$'\01']#$'\01'[^$'\01']#$'\01'[^$'\01']#$'\02'/}"
            -zui_stdlib_strip_codes "$__text"
            __idx+="${#REPLY}"
        elif -zui_stdlib_decode_text_field "$__seg" __output; then
            if [[ "$__id" = "${__output[1]}" ]]; then
                # Add characters that precede
                if [[ "$__seg" = (#b)(*)$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\02']#$'\02'* ]]; then
                    __idx+=${mend[1]}
                fi
                # Minimum x position
                : ${(P)__out1::=$__idx}

                __text="${(P)__output[5]}"
                __text="${__text[${(P)__output[4]},-1]}"
                __text="${__text[1,${(P)__output[3]}]}"
                __idx+="${#__text}"
                # Maximum x position
                : ${(P)__out2::=$__idx}
                return 0
            else
                # Add characters that precede and follow
                if [[ "$__seg" = (#b)(*)$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\032']#$'\032'[^$'\02']#$'\02'(*) ]]; then
                    __idx+=${mend[1]}+${#match[2]}
                fi
                __idx+="${(P)__output[3]}"
            fi
        else
            -zui_stdlib_strip_codes "$__seg"
            __idx+="${#REPLY}"
        fi
    done

    __idx+="${#ZUI_PB_SPACES[__i]}"

    # Store incorrect data
    : ${(P)__out1::=$__idx}
    : ${(P)__out2::=$__idx}

    return 1
}

# vim:ft=zsh
