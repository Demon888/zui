#
# Library file (*.lcmdr)
#
# Standard functions
#

# Available colors to embed in generated text
# \31 is octal value 25 - EM End of medium
typeset -g ZUI_RED=$'\7'
typeset -g ZUI_RED_E=$'\31'
typeset -g ZUI_GREEN=$'\3'
typeset -g ZUI_GREEN_E=$'\31'
typeset -g ZUI_YELLOW=$'\4'
typeset -g ZUI_YELLOW_E=$'\31'
typeset -g ZUI_MAGENTA=$'\5'
typeset -g ZUI_MAGENTA_E=$'\31'
typeset -g ZUI_CYAN=$'\6'
typeset -g ZUI_CYAN_E=$'\31'

# Appends hyperlink into "reply" output array. It's the
# standard action button, shown without surrounding
# "[" and "]".
#
# $1 - action ID
# $2 - data1, e.g. timestamp
# $3 - data2, e.g. command
# $4 - data3, e.g. active path
# $5 - data4, e.g. file path, file name, URL, other data
# $6 - text
# $7 - optional handler function name, can be empty text
# $8 - optional output variable name (defualt: 'reply[-1]')
# $reply array is extended by hyperlink's text (one new element)
#
function -zui_stdlib_button() {
    local id="${(q)1}" data1="${(q)2}" data2="${(q)3}" data3="${(q)4}" data4="${(q)5}" text="$6" handler="$7"
    local var_name="${8:-reply[-1]}"

    local pfx=""
    [[ -n "$handler" ]] && {
        [[ $handler = *internal* ]] && pfx="zuiiaction" || pfx="zuiaction"
        ZUI[$pfx$id]="$handler"
    }

    local -a output
    output=( $'\1'"$pfx$id"$'\1'"$data1"$'\1'"$data2"$'\1'"$data3"$'\1'"$data4"$'\2'"${text}" )
    : ${(P)var_name::=${output[@]}}
}

# Appends button hyperlink into "reply" output array
#
# Arguments are the same as in -zui_stdlib_button
#
function -zui_stdlib_rc_button() {
    local id="${(q)1}" data1="${(q)2}" data2="${(q)3}" data3="${(q)4}" data4="${(q)5}" text="$6" handler="$7"
    local var_name="${8:-reply[-1]}"
    local -a output

    local pfx=""
    [[ -n "$handler" ]] && {
        [[ $handler = *internal* ]] && pfx="zuiiaction" || pfx="zuiaction"
        ZUI[$pfx$id]="$handler"
    }

    output=( $'\1'"$pfx$id"$'\1'"$data1"$'\1'"$data2"$'\1'"$data3"$'\1'"$data4"$'\2'"[${text}]" )
    : ${(P)var_name::=${output[@]}}
}

# Appends anchor hyperlink into "reply" output array
#
# Arguments are the same as in -zui_stdlib_button,
# except the first data argument (data1, $2) needs
# to be index of line to jump to.
#
function -zui_stdlib_anchor() {
    setopt localoptions extendedglob

    local id="${(q)1}" data1="${(q)2}" data2="${(q)3}" data3="${(q)4}" data4="${(q)5}" text="$6" handler="$7"
    local var_name="${8:-reply[-1]}"

    # Set to some line that probably exist,
    # to signal that anchor works, but input
    # line number is incorrect
    [[ "$data1" != <-> ]] && data1=3

    # With no handler do only no-restart jumps
    local hpfx="zuiiaction" pfx="zuianchor"
    [[ -n "$handler" ]] && {
        [[ $handler = *internal* ]] || { hpfx="zuiaction"; pfx="zuieanchor"; }
        ZUI[$hpfx$id]="$handler"
    }

    # Return data
    local -a output
    output=( $'\1'"$pfx$id"$'\1'"$data1"$'\1'"$data2"$'\1'"$data3"$'\1'"$data4"$'\2'"${text}" )
    : ${(P)var_name::=${output[@]}}

    # Store anchor's target line
    ZUI[$pfx$id]="$data1"
}

# Resolves absolute path from current working directory and file path
#
# $1 - current working directory
#
# $2 - file path
#
# $reply[1] - dirname
#
# $reply[2] - basename
#
function -zui_stdlib_resolve_path() {
    local dirpath="$1" filepath="$2"

    local dirpath2="${dirpath/#\~/$HOME}"
    # :a behaves weird, prepends paths, which are not CWD
    [ "${dirpath2[1]}" = "/" ] && dirpath2="${dirpath2:a}"
    local filepath2="${filepath/#\~/$HOME}"
    [ "${filepath2[1]}" = "/" ] && filepath2="${filepath2:a}"

    reply=()
    if [ "${filepath2[1]}" = "/" ]; then
        reply[1]="${filepath2:h}"
        reply[2]="${filepath2:t}"
    else
        local p="$dirpath2/$filepath2"
        [ "${p[1]}" = "/" ] && p="${p:a}"
        reply[1]="${p:h}"
        reply[2]="${p:t}"
    fi
}

# Puts given text on command line – regardless if Zle is active or not
#
# $1 - text to put on command line
#
function -zui_stdlib_to_cmd_line() {
    if zle; then
        zle .kill-buffer
        BUFFER="$1"
        zle .redisplay
        zle .beginning-of-line
    else
        print -zr "$1"
    fi
}

#
# Returns time %H:%M, via datetime or `date` as fallback
#
function -zui_stdlib_get_time() {
    local ts
    ts="${EPOCHSECONDS}"
    [[ -z "$ts" || "$ts" = "0" ]] && REPLY="$(date '+%H:%M')" || strftime -s REPLY '%H:%M' "$ts"
}

# Returns date and time
#
# $REPLY - date and time string "Y_m_d_H.M.S"
#
function -zui_stdlib_get_datetime() {
    local ts
    ts="${EPOCHSECONDS}"
    [[ -z "$ts" || "$ts" = "0" ]] && REPLY="$(date '+%Y%m%d_%H.%M.%S')" || strftime -s REPLY '%Y%m%d_%H.%M.%S' "$ts"
}

#
# Returns timestamp, via datetime or `date` as fallback
#
function -zui_stdlib_get_timestamp() {
    REPLY="$EPOCHSECONDS"
    [[ -z "$REPLY" ]] && REPLY="$(date +%s)"
}

# Checks if given text is a hyperlink
function -zui_stdlib_is_hyperlink() {
    [[ "$1" = (#b)*$'\1'([^$'\1']#)$'\1'([^$'\1']#)$'\1'([^$'\1']#)$'\1'([^$'\1']#)$'\1'([^$'\2']#)$'\2'* ]]
}

# Decodes given hyperlink and returns data contained. Testable
# - test to check if hyperlink was correctly decoded
#
# $1 - hyperlink string
# $2 - optional output array name (default: "reply")
#
# $reply[1] - ID (of action)
# $reply[2] - time stamp
# $reply[3] - command
# $reply[4] - active path
# $reply[5] - file
#
function -zui_stdlib_decode_hyperlink() {
    if [[ "$1" = (#b)*$'\1'([^$'\1']#)$'\1'([^$'\1']#)$'\1'([^$'\1']#)$'\1'([^$'\1']#)$'\1'([^$'\2']#)$'\2'* ]]; then
        local id="${match[1]}" data1="${match[2]}" data2="${match[3]}" data3="${match[4]}" data4="${match[5]}"
        local var_name="${2:-reply}"
        : ${(PA)var_name::=}
        local assgn_str="${var_name}[1]"
        : ${(P)assgn_str::=${(Q)id}}
        assgn_str="${var_name}[2]"
        : ${(P)assgn_str::=${(Q)data1}}
        assgn_str="${var_name}[3]"
        : ${(P)assgn_str::=${(Q)data2}}
        assgn_str="${var_name}[4]"
        : ${(P)assgn_str::=${(Q)data3}}
        assgn_str="${var_name}[5]"
        : ${(P)assgn_str::=${(Q)data4}}
        return 0
    fi

    return 1
}

# Puts given links in a box, i.e. into sequence of lines
# that are limited in length. The sequence is returned
# in reply array. The length of a link is the length of
# its text, i.e. it doesn't include meta-data.
#
# $1 - box width (line length)
# $2 - max box height (i.e. max # of lines)
# $3 - hyperlink 1
# $4 - hyperlink 2
# $5 - ...
#
function -zui_stdlib_pack_hyperlinks_into_box() {
    local width="$1" max_height="$2"
    shift 2

    reply=()
    local hyp_link text new_line="" tmp pad
    integer idx max_idx="${#}" text_len diff_len now_width=0 now_height=0
    for (( idx=1; idx <= max_idx; idx ++ )); do
        # The box is limited in height
        (( now_height >= max_height )) && break

        hyp_link="${@[idx]}"
        text="${hyp_link#$'\1'*$'\2'}"
        text_len="${#text}"

        # Will hyp_link fit into this line?
        if [ "$now_width" != "0" ]; then
            if (( now_width + text_len + 1 <= width )); then
                now_width+=text_len+1
                new_line+=" $hyp_link"
            else
                # The line will be too long, pad it and store
                # it into the box array without current link
                # – leave the link for next loop run
                pad=""
                (( width-now_width > 0 )) && pad="${(r:width-now_width:: :)pad}"
                # Store the line into the box array
                reply+=( "${new_line}${pad}" )
                now_height+=1
                # Next line – empty
                new_line=""
                now_width=0
                # Repeat processing of current hyp_link
                idx=idx-1
            fi
        else
            if (( text_len <= width )); then
                now_width+=text_len
                new_line+="$hyp_link"
            else
                # Special case: a hyper-link that does
                # not fit even when it's alone in line
                diff_len=$(( ${#text} - (width-2) ))
                hyp_link="${hyp_link[1,-diff_len-1]}"
                # Store the truncated button into box array
                reply+=( "${hyp_link}.." )
                now_height+=1
                # Next line – empty
                new_line=""
                now_width=0
            fi
        fi
    done

    # Line that wasn't filled and store wasn't triggered
    if [[ -n "$new_line" && "$now_height" -lt "$max_height" ]]; then
        pad=""
        (( width-now_width > 0 )) && pad="${(r:width-now_width:: :)pad}"
        # Store the line into the box array
        reply+=( "${new_line}${pad}" )
    fi

    #local tmp
    #for tmp in "${reply[@]}"; do
    #    echo "| $tmp |" >> /tmp/reply
    #done
}

# Return n-th (z) segment of given text
# $1 - text
# $2 - segment (default is 1)
# $3 - destination variable name (default is "REPLY")
#
# Can use e.g. 'reply[1]' for $3
function -zui_stdlib_get_segment() {
    local -a segs
    segs=( "${(z@)1}" )
    local varname="${3:-REPLY}"
    local index="${2:-1}"
    : ${(P)varname::=${segs[index]}}
}

# Returns next file to write to in circular buffer set
# of file names <base>.1 <base>.2 ... <base>.<size>
#
# The buffer is ordered according to modification time.
#
# $1 - base of file names in circular buffer
# $2 - maximum number of files in circular buffer
#
function -zui_stdlib_circular_next() {
    setopt localoptions extendedglob

    # Input data
    local base="$1" count="$2"

    # Circular buffers' directory
    local circpath="$ZUI_CONFIG_DIR/var/circular_buffers"
    [[ ! -d "$circpath" ]] && command mkdir -p "$circpath"

    local -a circular_buffer
    circular_buffer=( "$circpath"/"$base".[[:digit:]]##(OmN) )

    if [[ "$count" -gt "${#circular_buffer}" ]]; then
        integer next_index=$(( ${#circular_buffer} + 1 ))
        REPLY="$circpath/${base}.${next_index}"
    else
        REPLY="${circular_buffer[1]}"
    fi

    return 0
}

#
# Returns absolute file paths of given circular buffer.
# They are ordered from most recent to least recent.
#
# No count is obtained, so all files are returned, even
# actually disabled by buffer limit.
#
# $1 - name of the circular buffer
#
function -zui_stdlib_circular_paths() {
    setopt localoptions extendedglob

    # Input data
    local base="$1"

    # Output array
    reply=( )

    # Circular buffers' directory
    local circpath="$ZUI_CONFIG_DIR/var/circular_buffers"
    [[ ! -d "$circpath" ]] && return 1

    reply=( "$circpath"/"$base".[[:digit:]]##(omN) )
}

ZUI[stdlib_sourced]="1"

# This function clears application data
# from $ZUI global hash. To be called at
# exit and at start of zui application

function -zui_stdlib_cleanup() {
    local -a keys
    # Anchors, checkboxes, actions, internal actions
    keys=( ${ZUI[(I)zuianchor*]} ${ZUI[(I)zuieanchor*]} ${ZUI[(I)zuicheckbox*]} ${ZUI[(I)zuiaction*]} ${ZUI[(I)zuiiaction*]} )

    local k
    for k in "${keys[@]}"; do
        unset "ZUI[$k]"
    done
}

# Internal action can call this function in
# order to replace part of list with new text.
#
# $1 - beginning line number of area to replace
# $2 - end line number of area to replace
# $3, $4, ... - new elements to replace lines $1..$2
function -zui_stdlib_submit_list_update() {
    integer size=$(( $2 - $1 + 1 ))
    2=$size
    ZUI[fly_update]="${(j: :)${(q)@}}"
}

# Internal action can call this function when
# replacing part of list to provide new hops,
# by submitting local indices. They will be
# automatically translated to global indices.
#
# $1, $2, ... - local indices of hops in the
#               substituted fragment
function -zui_stdlib_submit_hops() {
    ZUI[fly_hops]="${(j: :)${(q)@}}"
}

# Internal action can call this function when
# replacing part of list to provide new local
# indices that are non-selectable. They will
# be translated to global indices.
#
# $1, $2, ... - local indices of nonselectables
#               in the substituted fragment
function -zui_stdlib_submit_nonselectables() {
    ZUI[fly_nonselectables]="${(j: :)${(q)@}}"
}

# Deserializes on-the-fly update package.
# To be used rather only internally.
#
# $1 - the package
# $2 - optional target parameter name
function -zui_stdlib_decode_list_update() {
    local -a __segments
    [[ -n "$1" ]] && __segments=( "${(z@)1}" ) || __segments=( 0 0 )
    local __var_name="${2-reply}"

    : ${(PA)__var_name::="${(Q)__segments[@]}"}
}

# Deserializes on-the-fly hops substitution.
# For internal usage.
#
# $1 - the hops' package
# $2 - optional target parameter name
function -zui_stdlib_decode_hops() {
    local -a __hops
    [[ -n "$1" ]] && __hops=( "${(z@)1}" ) || __hops=( )
    local __var_name="${2-reply}"
    : ${(PA)__var_name::=${(Q)__hops[@]}}
}

# Deserializes on-the-fly nonselectables
# substitution. For internal usage.
#
# $1 - the nonselectables' package
# $2 - optional target parameter name
function -zui_stdlib_decode_nonselectables() {
    local -a __nonselectables
    [[ -n "$1" ]] && __nonselectables=( "${(z@)1}" ) || __nonselectables=( )
    local __var_name="${2-reply}"
    : ${(PA)__var_name::="${(Q)__nonselectables[@]}"}
}

# vim:ft=zsh
